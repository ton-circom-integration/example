#include "imports/stdlib.fc";

const slice verifier::Qm = "a43d999069fa8d3646c3d3db416daa9e666149eced37e272a274b9ce544e90b5043856e5b0ace460d85717d40ecfc4d7"s;
const slice verifier::Ql = "8ac68268309cf256144af6505caf85a1bd99f0547224cf1ebc80a230b52ccff8461a927b7d5d3a6e497784b38a47c653"s;
const slice verifier::Qr = "c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"s;
const slice verifier::Qo = "843d999069fa8d3646c3d3db416daa9e666149eced37e272a274b9ce544e90b5043856e5b0ace460d85717d40ecfc4d7"s;
const slice verifier::Qc = "b23282c50a88a66a859de1841985f18d08c4e56773d227059d007ecccd021b0a45e6610fd7bb5a08c71a365332e26eec"s;
const slice verifier::S1 = "893588159e7ce123534a1597bc8622dc974d210fda04e6dfadf016112c3a138f6c270b453325e4a8aa5ab331ee5e01ca"s;
const slice verifier::S2 = "b832b893588e6a6110d7a143f4674c87fc0820c132100d3d080d2679cd3596e45a9890e839200c97719eed80daf10388"s;
const slice verifier::S3 = "ad2caefaa3531fc18d12bc94fda509c9e5a1928b888fd730396fc200c04368cf728ef4e1fc98d92e5df234dd02cf0eb2"s;
const slice verifier::X_2 = "a79ca53d8b617ddcf7513f566645ad7c1351e30b7da4c1b7eec7e3f1cc81d7b3fc045411fd77a4215fd5a44dd9fcafdf0b485adff895184c5f50e4ed66e7673c866360c3a2ee8f4f84f206e1edf0b8ec4f16f1cb7033a345a268d8a6011159a1"s;

const int verifier::k1 = 2;
const int verifier::k2 = 3;

const int verifier::w1 = 28761180743467419819834788392525162889723178799021384024940474588120723734663;

const int verifier::nPublic = 1;
const int verifier::domainSize = 8; ;; 2**power
const int verifier::nLagrange = 1; ;; max(1, npub)

const int verifier::publicInputKeyLen = 32;

const slice bls::g1 = "97f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb"s;
const slice bls::g2 = "93e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"s;

const int verifier::err::public_not_present = 101;
const int verifier::err::failed_inverse = 102;
const int verifier::err::scalar_not_in_field = 103;
const int verifier::err::too_many_publics = 104;

int bls::pairing(slice ag1, slice ag2, slice bg1, slice bg2) asm "2 PUSHINT BLS_PAIRING";

int sha256_tuple(tuple p) asm "255 PUSHINT EXPLODEVAR HASHEXT_SHA256";

int tlen(tuple t) asm "TLEN";

int bls::R() asm "BLS_PUSHR";

int mulmod(int x, int y, int z) asm "MULMOD";

slice bls::g1_add(slice a, slice b) asm "BLS_G1_ADD";
slice bls::g1_mul(slice x, int s) asm "BLS_G1_MUL";
slice bls::g1_sub(slice a, slice b) asm "BLS_G1_SUB";
slice bls::g1_neg(slice a) asm "BLS_G1_NEG";

builder verifier::scalar_to_builder(int x) inline {
    return begin_cell().store_uint(x, 256);
}

int verifier::ff_inverse(int a, int q) inline {
    int t = 0;
    int newt = 1;
    int r = q;
    int newr = a;
    int quotient = 0;
    int aux = 0;
    while (newr) {
        quotient = r / newr;
        aux = t - quotient * newt;
        t = newt;
        newt = aux;

        aux = r - quotient * newr;
        r = newr;
        newr = aux;
    }

    if (r > 1) {
        throw(verifier::err::failed_inverse);
    }

    if (t < 0) {
        t += q;
    }

    return t;
}

int verifier::read_arr(cell arr, int i) inline {
    (slice v, int ok) = arr.udict_get?(verifier::publicInputKeyLen, i);
    throw_unless(verifier::err::public_not_present, ok);
    return v.preload_uint(256);
}

(cell, ()) verifier::set_arr(cell arr, int i, int v) inline {
    arr~udict_set_builder(verifier::publicInputKeyLen, i, begin_cell().store_uint(v, 256));
    return (arr, ());
}

cell verifier::inverse_array(cell vals, int n) inline {
    cell aux = null();
    int acc = vals.verifier::read_arr(0);
    int i = 1;
    while (i < n) {
        aux~verifier::set_arr(i, acc);
        acc = mulmod(acc, vals.verifier::read_arr(i), bls::R());
        i += 1;
    }
    acc = verifier::ff_inverse(acc, bls::R());
    i -= 1;
    int inv = 0;
    while (i > 0) {
        inv = mulmod(acc, aux.verifier::read_arr(i), bls::R());
        acc = mulmod(acc, vals.verifier::read_arr(i), bls::R());
        vals~verifier::set_arr(i, inv);
        i -= 1;
    }
    vals~verifier::set_arr(0, acc);
    return vals;
}

;; this function should add similarly to mulmod (i.e. work well when x+y overflows but (x+y)%z doesn't)
;; but since here it's only used for 255 bit numbers no overflow should happen anyway
;; however pay attention when porting to other curves if that ever happens
int addmod(int x, int y, int z) inline {
    return (x + y) % z;
}

() verifier::check_field(int x) impure inline {
    throw_unless(verifier::err::scalar_not_in_field, x < bls::R());
}

int verify(slice A, slice B, slice C, slice Z, slice T1, slice T2, slice T3, int eval_a, int eval_b, int eval_c, int eval_s1, int eval_s2, int eval_zw, slice Wxi, slice Wxiw, cell public) method_id {
    verifier::check_field(eval_a);
    verifier::check_field(eval_b);
    verifier::check_field(eval_c);
    verifier::check_field(eval_s1);
    verifier::check_field(eval_s2);
    verifier::check_field(eval_zw);

    ;; challenges

    tuple beta_hash = empty_tuple();
    beta_hash~tpush(verifier::Qm);
    beta_hash~tpush(verifier::Ql);
    beta_hash~tpush(verifier::Qr);
    beta_hash~tpush(verifier::Qo);
    beta_hash~tpush(verifier::Qc);
    beta_hash~tpush(verifier::S1);
    beta_hash~tpush(verifier::S2);
    beta_hash~tpush(verifier::S3);

    int pi = 0;
    cell public_tmp = public;
    while (pi < verifier::nPublic) {
        (slice v, int ok) = public_tmp~udict_delete_get?(verifier::publicInputKeyLen, pi);
        throw_unless(verifier::err::public_not_present, ok);
        pi += 1;
        beta_hash~tpush(v);
    }
    throw_unless(verifier::err::too_many_publics, null?(public_tmp));

    beta_hash~tpush(A);
    beta_hash~tpush(B);
    beta_hash~tpush(C);

    int beta = beta_hash.sha256_tuple() % bls::R();

    int gamma = begin_cell().store_uint(beta, 256).end_cell().begin_parse().string_hash() % bls::R();

    int alpha = begin_cell().store_uint(beta, 256).store_uint(gamma, 256).store_slice(Z).end_cell().begin_parse().string_hash() % bls::R();

    int alpha2 = mulmod(alpha, alpha, bls::R());

    tuple xi_hash = empty_tuple();
    xi_hash~tpush(begin_cell().store_uint(alpha, 256));
    xi_hash~tpush(T1);
    xi_hash~tpush(T2);
    xi_hash~tpush(T3);

    int xi = xi_hash.sha256_tuple() % bls::R();

    int betaXi = mulmod(beta, xi, bls::R());

    int xin = xi;

    
    xin = mulmod(xin, xin, bls::R());
    
    xin = mulmod(xin, xin, bls::R());
    
    xin = mulmod(xin, xin, bls::R());
    

    int zh = (xin - 1) % bls::R();
    cell invs = null();
    invs~verifier::set_arr(0, zh);

    tuple v_hash = empty_tuple();
    v_hash~tpush(xi.verifier::scalar_to_builder());
    v_hash~tpush(eval_a.verifier::scalar_to_builder());
    v_hash~tpush(eval_b.verifier::scalar_to_builder());
    v_hash~tpush(eval_c.verifier::scalar_to_builder());
    v_hash~tpush(eval_s1.verifier::scalar_to_builder());
    v_hash~tpush(eval_s2.verifier::scalar_to_builder());
    v_hash~tpush(eval_zw.verifier::scalar_to_builder());

    int v1 = v_hash.sha256_tuple() % bls::R();
    int v2 = mulmod(v1, v1, bls::R());
    int v3 = mulmod(v2, v1, bls::R());
    int v4 = mulmod(v3, v1, bls::R());
    int v5 = mulmod(v4, v1, bls::R());
    int u = begin_cell().store_slice(Wxi).store_slice(Wxiw).end_cell().begin_parse().string_hash() % bls::R();

    ;; lagrange

    int w = 1;

    
    invs~verifier::set_arr(1, mulmod(verifier::domainSize, (xi - w) % bls::R(), bls::R()));
    
    

    cell invd = invs.verifier::inverse_array(verifier::nLagrange + 1); ;; + 1 for zhinv

    cell restEvals = null();

    w = 1;

    
    
    int eval_l1 = mulmod(invd.verifier::read_arr(1), zh, bls::R());
    
    
    

    ;; PI
    int pl = 0;

     
    
    pl = (pl - mulmod(eval_l1, public.verifier::read_arr(0), bls::R())) % bls::R();
    
    

    int e1 = pl;
    int e2 = mulmod(eval_l1, alpha2, bls::R());

    int e3a = addmod(eval_a, mulmod(beta, eval_s1, bls::R()), bls::R());
    e3a = addmod(e3a, gamma, bls::R());

    int e3b = addmod(eval_b, mulmod(beta, eval_s2, bls::R()), bls::R());
    e3b = addmod(e3b, gamma, bls::R());

    int e3c = addmod(eval_c, gamma, bls::R());

    int e3 = mulmod(mulmod(e3a, e3b, bls::R()), e3c, bls::R());
    e3 = mulmod(e3, eval_zw, bls::R());
    e3 = mulmod(e3, alpha, bls::R());

    int r0 = addmod(e1, (- e2) % bls::R(), bls::R());
    r0 = addmod(r0, (- e3) % bls::R(), bls::R());

    slice d1 = bls::g1_mul(verifier::Qm, mulmod(eval_a, eval_b, bls::R()));
    d1 = bls::g1_add(d1, bls::g1_mul(verifier::Ql, eval_a));
    d1 = bls::g1_add(d1, bls::g1_mul(verifier::Qr, eval_b));
    d1 = bls::g1_add(d1, bls::g1_mul(verifier::Qo, eval_c));
    d1 = bls::g1_add(d1, verifier::Qc);

    int d2a1 = addmod(addmod(eval_a, betaXi, bls::R()), gamma, bls::R());
    int d2a2 = addmod(addmod(eval_b, mulmod(betaXi, verifier::k1, bls::R()), bls::R()), gamma, bls::R());
    int d2a3 = addmod(addmod(eval_c, mulmod(betaXi, verifier::k2, bls::R()), bls::R()), gamma, bls::R());

    int d2a = mulmod(d2a1, d2a2, bls::R());
    d2a = mulmod(d2a, d2a3, bls::R());
    d2a = mulmod(d2a, alpha, bls::R());

    int d2b = mulmod(eval_l1, alpha2, bls::R());

    slice d2 = bls::g1_mul(Z, addmod(addmod(d2a, d2b, bls::R()), u, bls::R()));

    int d3a = addmod(addmod(eval_a, mulmod(beta, eval_s1, bls::R()), bls::R()), gamma, bls::R());
    int d3b = addmod(addmod(eval_b, mulmod(beta, eval_s2, bls::R()), bls::R()), gamma, bls::R());
    int d3c = mulmod(mulmod(alpha, beta, bls::R()), eval_zw, bls::R());

    slice d3 = bls::g1_mul(verifier::S3, mulmod(mulmod(d3a, d3b, bls::R()), d3c, bls::R()));

    slice d4low = T1;
    slice d4mid = bls::g1_mul(T2, xin);
    slice d4high = bls::g1_mul(T3, mulmod(xin, xin, bls::R()));
    slice d4 = bls::g1_add(d4low, bls::g1_add(d4mid, d4high));
    d4 = bls::g1_mul(d4, zh);

    slice D = bls::g1_sub(bls::g1_sub(bls::g1_add(d1, d2), d3), d4);

    slice F = bls::g1_add(D, bls::g1_mul(A, v1));
    F = bls::g1_add(F, bls::g1_mul(B, v2));
    F = bls::g1_add(F, bls::g1_mul(C, v3));
    F = bls::g1_add(F, bls::g1_mul(verifier::S1, v4));
    F = bls::g1_add(F, bls::g1_mul(verifier::S2, v5));

    int e = addmod((- r0) % bls::R(), mulmod(v1, eval_a, bls::R()), bls::R());
    e = addmod(e, mulmod(v2, eval_b, bls::R()), bls::R());
    e = addmod(e, mulmod(v3, eval_c, bls::R()), bls::R());
    e = addmod(e, mulmod(v4, eval_s1, bls::R()), bls::R());
    e = addmod(e, mulmod(v5, eval_s2, bls::R()), bls::R());
    e = addmod(e, mulmod(u, eval_zw, bls::R()), bls::R());

    slice E = bls::g1_mul(bls::g1, e);

    slice A1 = Wxi;
    A1 = bls::g1_add(A1, bls::g1_mul(Wxiw, u));

    slice B1 = bls::g1_mul(Wxi, xi);
    int s = mulmod(mulmod(u, xi, bls::R()), verifier::w1, bls::R());
    B1 = bls::g1_add(B1, bls::g1_mul(Wxiw, s));
    B1 = bls::g1_add(B1, F);
    B1 = bls::g1_sub(B1, E);

    return bls::pairing(bls::g1_neg(A1), verifier::X_2, B1, bls::g2);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}
